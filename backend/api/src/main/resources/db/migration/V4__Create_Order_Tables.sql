-- File: backend/api/src/main/resources/db/migration/V4__Create_Order_Tables.sql

-- Create the 'orders' table
CREATE TABLE orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id BIGINT NOT NULL, -- Assuming this links to a user ID from the 'users' table
    restaurant_id BIGINT NOT NULL, -- Assuming this links to a restaurant ID from the 'restaurants' table
    status VARCHAR(50) NOT NULL, -- To store OrderStatus enum values like PLACED, CONFIRMED, etc.
    total_price DECIMAL(10, 2) NOT NULL,

    -- Delivery Address Details (as per your Order.java entity)
    delivery_address_line1 VARCHAR(255),
    delivery_address_line2 VARCHAR(255),
    delivery_city VARCHAR(100),
    delivery_state VARCHAR(100),
    delivery_postal_code VARCHAR(20),
    delivery_country VARCHAR(100),
    customer_contact_number VARCHAR(20),
    special_instructions VARCHAR(500),

    -- Timestamps (as per your Order.java entity - using TIMESTAMP for LocalDateTime)
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    placed_at TIMESTAMP,
    confirmed_at TIMESTAMP,
    preparing_at TIMESTAMP,
    ready_at TIMESTAMP,
    delivered_at TIMESTAMP,
    cancelled_at TIMESTAMP,

    -- Foreign key constraints (optional but good practice)
    -- Add if you want DB-level enforcement, assuming customer_id refers to users.id
    -- CONSTRAINT fk_orders_customer FOREIGN KEY (customer_id) REFERENCES users (id),
    CONSTRAINT fk_orders_restaurant FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);

-- Create the 'order_items' table
CREATE TABLE order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT NOT NULL,
    menu_item_id BIGINT NOT NULL, -- ID of the item from the menu module (not a direct FK here if menu items are managed separately)
    menu_item_name VARCHAR(255) NOT NULL, -- Denormalized for convenience
    quantity INTEGER NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    item_total_price DECIMAL(10, 2) NOT NULL,
    selected_options VARCHAR(1000), -- For storing selected customizations as JSON or text

    CONSTRAINT fk_order_items_order FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE
);

-- Optional: Add indexes for performance
CREATE INDEX idx_orders_customer_id ON orders (customer_id);
CREATE INDEX idx_orders_restaurant_id ON orders (restaurant_id);
CREATE INDEX idx_orders_status ON orders (status);
CREATE INDEX idx_order_items_order_id ON order_items (order_id);
CREATE INDEX idx_order_items_menu_item_id ON order_items (menu_item_id);

